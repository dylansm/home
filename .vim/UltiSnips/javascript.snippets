priority -50

snippet a "Arrow ƒ"
(${1:args}) => ${2:body};$0
endsnippet

snippet => "Arrow ƒ"
(${1:args}) => ${2:body};$0
endsnippet

snippet bac "bindActionCreators"
bindActionCreators({ ${1:action} }, dispatch);
endsnippet

snippet befre "TDD React beforeEach component"
let component;

beforeEach(() => {
  component = renderComponent(${1:ComponentName});
});
$0
endsnippet

snippet c "ES2015 Class constructor"
constructor(props) {
  super(props);

  this.state = { ${1:${2:key}: '${3:value}'} };
}${0}
endsnippet

snippet cc "JSdoc single line comment"
/** ${1:The the ${2:foo} function ${3:does something}}. */$0
endsnippet

snippet cc "JSdoc multiline comment"
/**
 * Represents a book.
 * ${1:@${2:constructor}}
 * ${3:@param \{${4:string}\} ${5:title} - ${6:description.}}
 */$0
endsnippet

snippet ca "Switch case statement"
case ${1:caseName}:
  return $2;
endsnippet

snippet cla "ES2015 Class"
class ${1:Class} {
  ${2:constructor() {
    $3
  }}
}$0
endsnippet

snippet cn "JSX className"
className="${1:name}"$0
endsnippet

snippet co "ES2015 constant"
const ${1:name} = ${2:value};
endsnippet

snippet coo "ES2015 shorthand obj constant"
const { ${1:name} } = ${2:value};
endsnippet

snippet comp "React component"
class ${1:ComponentName} extends Component {
  render() {
    return (
      <div>
        $1
      </div>
    )
  }
}$0

${3:export default $1;}
endsnippet

snippet csm "React createStoreWithMiddleware"
const createStoreWithMiddleware = applyMiddleware(${1:middleware})(createStore);$0
endsnippet

snippet cwm "React Lifecycle compWillMount"
componentWillMount() {
  $1
}
endsnippet

snippet desc "TDD Describe"
describe('${1:Thing}', () => {
  it('${2:does something}', () => {
    expect($3).to.${4:matcher}(${5:matched});
  });$0
})
endsnippet

snippet exd "ES2015 export default"
export default ${1:MyComp}${2:(${3:{
  $0
}})${4:(${5:Component})}}
endsnippet

snippet exco "ES2015 export const"
export const ${1:name} = '$1';
endsnippet

snippet exdf "ES2015 export default function ƒ"
export default function (${1:args}) {
  $0
}
endsnippet

snippet exf "ES2015 export function ƒ"
export function ${1:name}(${2:args}) {
  return {
    $3
  }
}$0
endsnippet

snippet ex= "ES2015 export default ƒ"
export default (${1:args}) => {
  return $2
}$0
endsnippet

snippet exc "Export ES2015 class"
export default class ${1:ClassName} {
  ${2:<$1 />}
}$0
endsnippet

snippet excomp "Export React component"
class ${1:ComponentName} extends Component {
  render() {
    return (
      <div className="${1/(^[A-Z][^A-Z]+)|([A-Z][^A-Z])+/\l$1(?2:-\l$2:$2)/g}">
        $0
      </div>
    );
  }
}

export default $1
endsnippet

snippet exdc "Export ES2015 class"
export default class ${1:ClassName} {
  return $0
}
endsnippet

snippet exdcomp "Export React component"
export default class ${1:ComponentName} extends Component {
  render() {
    return (
      <div className="${1/(^[A-Z][^A-Z]+)|([A-Z][^A-Z])+/\l$1(?2:-\l$2:$2)/g}">
        $0
      </div>
    );
  }
}
endsnippet

snippet ex "ES2015 module.exports"
module.exports = ${1:module};
endsnippet

snippet exconn "Redux export connected component"
export default connect(${1:mapStateToProps}${2:, ${3:mapDispatchToProps}})${4:(${5:Component})};$0
endsnippet

snippet exp "TDD expect"
expect(component${1:.find('${2:element}')}).to.${3:exist};
endsnippet

snippet exrou "Express route"
function(req, res, next) {
  $1
}$0
endsnippet

snippet redform "ReduxForm component"
import { reduxForm } from 'redux-form'

class ${1:ComponentName} extends Component {
  render () {
    return (
      <form>
        <fieldset className='form-group'>
          $0
        </fieldset>
        <button action='submit' className='btn btn-primary'>Submit</button>
      </form>
    );
  }
}

export default reduxForm({
  form: '${1/(^[A-Z][^A-Z]+)|([A-Z][^A-Z])+/\l$1(?2:-\l$2:$2)/g}',
  fields: ['$2'],
})(${3:$1});
endsnippet

snippet im* "Import all as..."
import * as ${1:actions} from '${2:./${3:path}}';$0
endsnippet

snippet imbac "Redux bindActionCreators"
import { bindActionCreators } from 'redux';$0
endsnippet

snippet imcomp "Import component file"
import ${1:ComponentName} from '${2:..}/${3:components/}${1/(^[A-Z][^A-Z]+)|([A-Z][^A-Z])+/\l$1(?2:_\l$2:$2)/g}';$0
endsnippet

snippet imf "Import from file"
import ${1:module} from '${2:..}/${1/(^[A-Z][^A-Z]+)|([A-Z][^A-Z])+/\l$1(?2:_\l$2:$2)/g}';$0
endsnippet

snippet im "ES2015 import module"
import ${1:Module} from '${2:..}/${3:${4:path}/}${1/(^[A-Z][^A-Z]+)|([A-Z][^A-Z])+/\l$1(?2:-\l$2:$2)/g}';$0
endsnippet

snippet imconn
import { connect } from 'react-redux';$0
endsnippet

snippet imexp "Import react testing helpers"
import { renderComponent, expect } from '${1:..}/${2:test_helper}';$0
endsnippet

snippet imli "Import Route from react-router-dom"
import { Link } from 'react-router-dom';$0
endsnippet

snippet imlirou "Import Route from react-router-dom"
import { Link, Route } from 'react-router-dom';$0
endsnippet

snippet imo "ES2015 import { module }"
import { ${1:module} } from '${2:lib}';$0
endsnippet

snippet improp "Import PropTypes"
import PropTypes from 'prop-types';
endsnippet

snippet imre "React and { Component} import"
import React, { Component } from 'react';$0
endsnippet

snippet imrou "Import Route from react-router-dom"
import { Route } from 'react-router-dom';$0
endsnippet

snippet imtest "React component test"
import { renderComponent, expect } from '../test_helper';
import ${1:ComponentName} from '${2:../../src/components}/${1/(^[A-Z][^A-Z]+)|([A-Z][^A-Z])+/\l$1(?2:_\l$2:$2)/g}';

describe('$1', () => {
  it('${3:does something}', () => {
    const component = renderComponent($1);
    expect(component${4:.find('${5:element}')}).to.${6:exist};
  });$0
})
endsnippet

snippet it "TDD it block"
it('${1:does something}', () => {
  ${2:const component = renderComponent(${3:ComponentName})}
  expect(component${4:.find('${5:element}')}).to.${6:exist}
});
endsnippet

snippet jsdom "Global document for jsdom"
global.document = jsdom.jsdom('<!doctype html><html><body></body></html>');
global.window = global.document.defaultView;
endsnippet

snippet k "React iterator key"
key={${1:value}}$0
endsnippet

snippet log "console.log"
console.log($1);$0
endsnippet

snippet mdp "React-Redux mapDispatchToProps"
mapDispatchToProps$0
endsnippet

snippet mdpf "React-Redux mapDispatchToProps ƒ"
function mapDispatchToProps (dispatch) {
  return bindActionCreators({ ${1:${2:key}: ${3:value}} }, dispatch);
}$0
endsnippet

snippet msp
mapStateToProps$0
endsnippet

snippet mspf "React-Redux mapStateToProps ƒ"
function mapStateToProps (state) {
  return {$1};
}$0
endsnippet

snippet props "static PropTypes"
static propTypes = {
  ${1:prop}: PropTypes.func.isRequired,
}
endsnippet

snippet r "Return"
return $0;
endsnippet

snippet rc "React return component"
return (
  ${1:<div>$2</div>}
);$0
endsnippet

snippet render
render() {
  return (
    $0
  );
}
endsnippet

snippet rou "React Router route entry"
<Route path="${1:/}" component={${2:Component}} />
endsnippet

snippet roubh "Router component, browserHist"
<Router history={browserHistory} routes={${1:routes}} />
  $0
</Router>
endsnippet

snippet sw "Minimal switch statement"
switch (${1:term}) {
  case ${2:caseName}:
    return $3;
}
endsnippet

