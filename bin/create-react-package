#!/bin/bash

if [[ ! -d src ]]; then
  echo "No src directory found. Run this command from the root of a React application..."
  exit
fi

if [[ -z "$1" ]]; then
  echo "Please provide a component name."
  read -p ": " input
  package_name=`echo $input | sed 's/ /_/g'`
else
  package_name=$1
fi

if [[ -d ./src && ! -d ./src/components ]]; then
  echo "No components directory found in src. Creating components directory now..."
  mkdir ./src/components
fi

if [[ -z "$2" ]]; then
  echo "Please provide a sub-path for this component (e.g. layout, ui, page)."
  read -p ": " input
  component_type=`echo $input | sed 's/ /_/g'`
else
  component_type=$2
fi

# uppercase first char
component_name="$(tr '[:lower:]' '[:upper:]' <<< ${package_name:0:1})${package_name:1}"

if [[ -z $component_type ]]; then
  echo "Package will be created in the root of the components directory..."
  package_dir="src/components/$package_name"
else
  package_dir="src/components/$component_type/$package_name"
fi
mkdir -p "$package_dir"
if [[ -d "$package_dir" ]]; then
  cat >"$package_dir/package.json" <<EOL
{
  "name": "$component_name",
  "version": "0.0.0",
  "private": true,
  "main": "./$component_name.js"
}
EOL

  cat >"$package_dir/$component_name.js" <<EOL
import React, { Component } from 'react'
import './$component_name.css';

export default class $component_name extends Component {
  render() {
    return (
      <div className="$package_name">
        This is the $component_name component.
      </div>
    )
  }
}
EOL

  cat >"$package_dir/$component_name.css" <<EOL
.$package_name {
}
EOL

  touch "$package_dir/$component_name.css"

else
  "Couldn't create package. Does it already exist?"
  exit
fi
